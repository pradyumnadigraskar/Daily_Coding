Q.(Leet Code 322) Coin Change

You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

You may assume that you have an infinite number of each kind of coin.

 

Example 1:

Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1

Example 2:

Input: coins = [2], amount = 3
Output: -1

Example 3:

Input: coins = [1], amount = 0
Output: 0

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Solution:-

class Solution(object):
    def coinChange(self, coins, amount):
        n = len(coins)
        coins.sort()
        max_val = amount + 1  # Set maximum value to be greater than any possible value in dp
        dp = [max_val] * (amount + 1)
        dp[0] = 0

        for i in range(1, amount + 1):
            for coin in coins:
                difference = i - coin
                if difference >= 0:  # Check if it's possible to form the amount
                    if dp[i] < 1 + dp[difference]:
                        dp[i] = dp[i]
                    else:
                        dp[i] = 1 + dp[difference]

        if dp[amount] < max_val:
            return dp[amount]
        else:
            return -1

       
